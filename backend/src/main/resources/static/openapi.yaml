openapi: 3.0.3
info:
  title: Boação API
  version: 1.0.0
  description: API para gerenciar voluntários, ONGs, atividades e suas interações.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

tags:
  - name: Tags
    description: Endpoints para gerenciamento de tags de atividades
  - name: Atividades
    description: Endpoints para gerenciamento de atividades
  - name: ONGs
    description: Endpoints para gerenciamento de Organizações Não Governamentais (ONGs)
  - name: Histórico de Atividades
    description: Endpoints para histórico de atividades de voluntários
  - name: Voluntários
    description: Endpoints para gerenciamento de voluntários
  - name: Avaliações
    description: Endpoints para gerenciamento de avaliações de voluntários

paths:
  # ==========================================
  # Endpoints de Tags
  # ==========================================
  /tags:
    get:
      tags: [Tags]
      summary: Buscar todas as Tags
      description: Retorna todas as Tags de atividades
      responses:
        "200":
          description: Sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagDTO"
        "401":
          description: Não autorizado. Usuário não logado para acessar o recurso.
          content:
            application/json:
              examples:
                unauthorized:
                  summary: Exemplo de resposta 401
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 401
                    error: "Unauthorized"
                    message: "Não autorizado. Usuário não logado."
                    path: "/tags"
        "500":
          description: Erro interno no servidor. Ocorreu um erro inesperado ao processar a solicitação.
          content:
            application/json:
              examples:
                server_error:
                  summary: Exemplo de resposta 500
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 500
                    error: "Internal Server Error"
                    message: "Erro ao processar a solicitação. Falha ao conectar com o banco de dados."
                    path: "/tags"
    put:
      tags: [Tags]
      summary: Adicionar tags
      description: Adiciona uma ou mais tags ao recurso.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
              example: [1, 2, 3]
      responses:
        "200":
          description: Tags adicionadas com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagRequestDTO"
        "400":
          description: Requisição inválida.
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.
  /tags/{id}:
    get:
      tags: [Tags]
      summary: Buscar uma Tag pelo ID
      description: Retorna a Tag de uma atividade específica com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da Tag a ser buscada
          schema:
            type: integer
      responses:
        "200":
          description: Sucesso. A Tag foi encontrada e retornada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDTO"
        "401":
          description: Não autorizado. Usuário não logado para acessar o recurso.
          content:
            application/json:
              examples:
                unauthorized:
                  summary: Exemplo de resposta 401
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 401
                    error: "Unauthorized"
                    message: "Não autorizado. Usuário não logado."
                    path: "/tags/1"
        "403":
          description: Proibido. O usuário não tem permissão para acessar o recurso.
          content:
            application/json:
              examples:
                forbidden:
                  summary: Exemplo de resposta 403
                  value:
                    timestamp: "2025-04-19T08:30:00.664+00:00"
                    status: 403
                    error: "Forbidden"
                    message: "Proibido. O usuário não tem permissão para acessar o recurso."
                    path: "/tags/1"
        "404":
          description: Não encontrado. A Tag com o ID fornecido não foi encontrada.
          content:
            application/json:
              examples:
                not_found:
                  summary: Exemplo de resposta 404
                  value:
                    timestamp: "2025-04-19T08:35:17.664+00:00"
                    status: 404
                    error: "Not Found"
                    message: "Tag não encontrada! Id: 22"
                    path: "/tags/22"
        "500":
          description: Erro interno no servidor. Ocorreu um erro inesperado ao processar a solicitação.
          content:
            application/json:
              examples:
                server_error:
                  summary: Exemplo de resposta 500
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 500
                    error: "Internal Server Error"
                    message: "Erro ao processar a solicitação. Falha ao conectar com o banco de dados."
                    path: "/tags/1"

  # ==========================================
  # Endpoints de Atividades
  # ==========================================

  /api/atividades:
    get:
      tags: [Atividades]
      summary: Listar atividades paginadas
      description: Retorna uma lista paginada de atividades.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nome,asc)"
      responses:
        "200":
          description: Lista de atividades retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/AtividadeResponseDTO" # Atualizado para AtividadeResponseDTO
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

    post:
      tags: [Atividades]
      summary: Cadastrar nova atividade
      description: Cadastra uma nova atividade.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeRequestDTO"
      responses:
        "200":
          description: Atividade criada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "422":
          description: Dados inválidos.
        "500":
          description: Erro interno no servidor.

  /api/atividades/buscar:
    get:
      tags: [Atividades]
      summary: Buscar todas as atividades (sem paginação)
      description: Retorna uma lista de todas as atividades cadastradas.
      responses:
        "200":
          description: Lista de atividades retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

  /api/atividades/{id}:
    put:
      tags: [Atividades]
      summary: Atualizar atividade existente
      description: Atualiza os dados de uma atividade específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeRequestDTO"
      responses:
        "200":
          description: Atividade atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "422":
          description: Dados inválidos.
        "500":
          description: Erro interno.

    delete:
      tags: [Atividades]
      summary: Deletar uma atividade
      description: Remove uma atividade com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Atividade deletada com sucesso.
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "500":
          description: Erro interno.

  /api/atividades/{id}/status/{novoStatus}:
    patch:
      tags: [Atividades]
      summary: Atualizar status de uma atividade
      description: Altera o status de uma atividade específica.
      parameters:
        - name: id
          in: path
          required: true
          description: O ID da atividade que queremos atualizar.
          schema:
            type: integer
        - name: novoStatus
          in: path
          required: true
          description: O novo status da atividade.
          schema:
            type: string
            enum:
              - ANDAMENTO
              - CONGELADA
      responses:
        "200":
          description: Status atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeStatusResponseDTO"
        "400":
          description: Requisição inválida. Status inválido.
        "404":
          description: Atividade não encontrada.
        "409":
          description: Conflito. Transição de status não permitida.
        "500":
          description: Erro interno no servidor.

  /api/atividades/dados-atividade/{id}:
    get:
      tags: [Atividades]
      summary: Obter dados completos de uma atividade
      description: Retorna todos os dados de uma atividade específica.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da atividade
          schema:
            type: integer
      responses:
        "200":
          description: Dados da atividade retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeResponseDTO"
        "404":
          description: Atividade não encontrada.
        "500":
          description: Erro interno no servidor.

  /api/atividades/editar/{id}:
    put:
      tags: [Atividades]
      summary: Atualizar atividade existente
      description: Atualiza os dados de uma atividade específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeRequestDTO"
      responses:
        "200":
          description: Atividade atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "422":
          description: Dados inválidos.
        "500":
          description: Erro interno.

  /api/atividades/atualizar-candidatura:
    post:
      tags: [Atividades]
      summary: Atualizar status de candidatura de voluntário em atividade
      description: Associa o histórico de atividade a um voluntário.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeIdDTO"
      responses:
        "200":
          description: Status de candidatura atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoluntarioAtividadeDTO"
        "400":
          description: Requisição inválida.
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

  /api/atividades/estado/{estado}:
    get:
      tags: [Atividades]
      summary: Buscar atividades por estado da ONG
      description: Retorna uma lista paginada de atividades de ONGs localizadas em um estado específico.
      parameters:
        - name: estado
          in: path
          required: true
          description: "Estado a ser utilizado na busca de atividades (ex: SP, RJ)."
          schema:
            type: string
            example: "SP"
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nome,asc)"
      responses:
        "200":
          description: Lista de atividades por estado retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/AtividadeResponseDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "404":
          description: Nenhuma atividade encontrada para o estado especificado.
        "500":
          description: Erro interno no servidor.

  /api/atividades/tag/{tag}:
    get:
      tags: [Atividades]
      summary: Buscar atividades por tag
      description: Retorna uma lista paginada de atividades associadas a uma tag específica.
      parameters:
        - name: tag
          in: path
          required: true
          description: "Tag a ser utilizada na busca de atividades (ex: Educação)."
          schema:
            type: string
            example: "Educação"
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nome,asc)"
      responses:
        "200":
          description: Lista de atividades por tag retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/AtividadeResponseDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "404":
          description: Nenhuma atividade encontrada para a tag especificada.
        "500":
          description: Erro interno no servidor.

  # ==========================================
  # Endpoints de Histórico de Atividades
  # ==========================================
  /api/historico-atividades:
    get:
      tags: [Histórico de Atividades]
      summary: Buscar histórico de atividades por ID do usuário
      description: Retorna uma lista paginada do histórico de atividades de um usuário.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: dataInscricao,desc)"
      responses:
        "200":
          description: Histórico de atividades retornado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoricoAtividadeDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

  /api/historico-atividades/data:
    get:
      tags: [Histórico de Atividades]
      summary: Buscar histórico de atividades por data de encerramento
      description: Retorna uma lista paginada do histórico de atividades encerradas em uma data específica, para o usuário autenticado.
      parameters:
        - in: query
          name: encerradoEm
          schema:
            type: string
            format: date
            example: "2024-06-01"
          required: true
          description: Data de encerramento no formato YYYY-MM-DD.
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: dataInscricao,desc)"
      responses:
        "200":
          description: Histórico de atividades retornado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoricoAtividadeDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "400":
          description: Formato de data inválido.
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

  /api/historico-atividades/listar-voluntarios-aprovados/atividade/{id}:
    get:
      tags: [Histórico de Atividades]
      summary: Listar voluntários aprovados por atividade
      description: Retorna a quantidade e a lista de voluntários aprovados para uma atividade específica.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da atividade
          schema:
            type: integer
      responses:
        "200":
          description: Sucesso. Lista de voluntários aprovados retornada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricoAtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "500":
          description: Erro interno no servidor.

  /api/historico-atividades/gestao-voluntarios/atividade/{id}:
    get:
      tags: [Histórico de Atividades]
      summary: Listar todos os voluntários inscritos em uma atividade
      description: Retorna a quantidade e a lista de todos os voluntários inscritos em uma atividade, independentemente do status da candidatura.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da atividade
          schema:
            type: integer
      responses:
        "200":
          description: Sucesso. Lista de voluntários inscritos retornada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricoAtividadeTodosResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "500":
          description: Erro interno no servidor.

  /api/historico-atividades/gestao-voluntarios/atividade/{atividadeId}/statusCandidatura/{status}:
    put:
      tags: [Histórico de Atividades]
      summary: Atualizar status da candidatura de um voluntário em uma atividade
      description: Atualiza o status da candidatura de um voluntário para uma atividade específica.
      parameters:
        - name: atividadeId
          in: path
          required: true
          description: ID da atividade
          schema:
            type: integer
        - name: status
          in: path
          required: true
          description: Novo status da candidatura
          schema:
            type: string
            enum:
              - APROVADO
              - REPROVADO
              - PENDENTE
              - CANCELADO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HistoricoAtividadeRequestDTO"
      responses:
        "204":
          description: Status atualizado com sucesso (No Content).
        "400":
          description: "Dados inválidos (ex: status inválido)."
        "401":
          description: Não autorizado.
        "404":
          description: Atividade ou histórico de candidatura não encontrado.
        "500":
          description: Erro interno no servidor.

  # ==========================================
  # Endpoints de ONGs
  # ==========================================
  /api/ong/cadastrar:
    post:
      tags: [ONGs]
      summary: Cadastrar nova ONG
      description: Registra uma nova ONG no sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OngRequestDTO"
      responses:
        "201":
          description: ONG criada com sucesso.
          headers:
            Location:
              description: URI do recurso criado.
              schema:
                type: string
                format: uri
                example: "/api/ong/101" # Atualizado para refletir o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OngResponseDTO"
        "400":
          description: Requisição inválida. Dados fornecidos são incorretos ou incompletos.
        "409":
          description: Conflito. CNPJ ou E-mail já cadastrados.
        "500":
          description: Erro interno no servidor.

  /api/ong/perfil-ong:
    get:
      tags: [ONGs]
      summary: Obter perfil da ONG autenticada
      description: Retorna os detalhes do perfil da ONG atualmente autenticada.
      responses:
        "200":
          description: Perfil da ONG retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerfilOngResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Perfil da ONG não encontrado.
        "500":
          description: Erro interno no servidor.

  /api/ong/dados-ong:
    get:
      tags: [ONGs]
      summary: Obter dados completos da ONG autenticade
      description: Retorna todos os dados da ONG atualmente autenticada, incluindo informações de contato e endereço.
      responses:
        "200":
          description: Dados da ONG retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DadosOngResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Dados da ONG não encontrados.
        "500":
          description: Erro interno no servidor.

  /api/ong/editar:
    put:
      tags: [ONGs]
      summary: Atualizar dados da ONG autenticada
      description: Atualiza as informações da ONG atualmente autenticada.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OngUpdateRequestDTO"
      responses:
        "204":
          description: Dados da ONG atualizados com sucesso (No Content).
        "400":
          description: Requisição inválida.
        "401":
          description: Não autorizado.
        "404":
          description: ONG não encontrada para atualização.
        "500":
          description: Erro interno no servidor.

  /api/ong/tag/{tag}:
    get:
      tags: [ONGs]
      summary: Buscar ONGs por Tag
      description: Retorna uma lista paginada de ONGs associadas a uma tag específica.
      parameters:
        - name: tag
          in: path
          required: true
          description: Tag a ser utilizada na busca de ONGs.
          schema:
            type: string
            example: "Educação"
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nomeEntidade,asc)"
      responses:
        "200":
          description: Lista de ONGs por tag retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/ListaOngResponse"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "404":
          description: Nenhuma ONG encontrada para a tag especificada.
        "500":
          description: Erro interno no servidor.

  /api/ong/estado/{estado}:
    get:
      tags: [ONGs]
      summary: Buscar ONGs por Estado
      description: Retorna uma lista paginada de ONGs localizadas em um estado específico.
      parameters:
        - name: estado
          in: path
          required: true
          description: 'Estado a ser utilizado na busca de ONGs (ex: SP, RJ).'
          schema:
            type: string
            example: "SP"
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nomeEntidade,asc)"
      responses:
        "200":
          description: Lista de ONGs por estado retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/ListaOngResponse"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "404":
          description: Nenhuma ONG encontrada para o estado especificado.
        "500":
          description: Erro interno no servidor.

  # ==========================================
  # Endpoints de Voluntários
  # ==========================================
  /api/voluntario/cadastrar:
    post:
      tags: [Voluntários]
      summary: Cadastrar novo voluntário
      description: Registra um novo voluntário no sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoluntarioRequestDTO"
      responses:
        "201":
          description: Voluntário criado com sucesso.
          headers:
            Location:
              description: URI do recurso criado.
              schema:
                type: string
                format: uri
                example: "/api/voluntario/1"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoluntarioResponseDTO"
        "400":
          description: Requisição inválida. Dados fornecidos são incorretos ou incompletos.
        "409":
          description: Conflito. CPF ou E-mail já cadastrados.
        "500":
          description: Erro interno no servidor.

  /api/voluntario/perfil-voluntario:
    get:
      tags: [Voluntários]
      summary: Obter perfil do voluntário autenticado
      description: Retorna os detalhes do perfil do voluntário atualmente autenticado.
      responses:
        "200":
          description: Perfil do voluntário retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerfilVoluntarioResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Perfil do voluntário não encontrado.
        "500":
          description: Erro interno no servidor.

  /api/voluntario/dados-voluntario:
    get:
      tags: [Voluntários]
      summary: Obter dados completos do voluntário autenticado
      description: Retorna todos os dados do voluntário atualmente autenticado, incluindo informações de contato e endereço.
      responses:
        "200":
          description: Dados do voluntário retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DadosVoluntarioResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Dados do voluntário não encontrados.
        "500":
          description: Erro interno no servidor.

  /api/voluntario/editar:
    put:
      tags: [Voluntários]
      summary: Atualizar dados do voluntário autenticado
      description: Atualiza as informações do voluntário atualmente autenticado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoluntarioUpdateRequestDTO"
      responses:
        "204":
          description: Dados do voluntário atualizados com sucesso (No Content).
        "400":
          description: Requisição inválida.
        "401":
          description: Não autorizado.
        "404":
          description: Voluntário não encontrado para atualização.
        "500":
          description: Erro interno no servidor.

  # ==========================================
  # Endpoints de Avaliações
  # ==========================================
  /api/avaliacoes:
    post:
      tags: [Avaliações]
      summary: Avaliar um voluntário
      description: Permite que uma ONG avalie um voluntário após uma atividade.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AvaliacaoRequestDTO"
      responses:
        "201":
          description: Avaliação criada com sucesso.
          headers:
            Location:
              description: URI do recurso criado.
              schema:
                type: string
                format: uri
                example: "/api/avaliacoes/1"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvaliacaoResponseDTO"
        "400":
          description: Requisição inválida. Dados fornecidos são incorretos ou incompletos.
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

  /api/avaliacoes/historicoId/{historicoId}:
    get:
      tags: [Avaliações]
      summary: Buscar avaliação por ID do histórico de atividade
      description: Retorna uma avaliação específica com base no ID do histórico de atividade.
      parameters:
        - name: historicoId
          in: path
          required: true
          description: ID do histórico de atividade
          schema:
            type: integer
      responses:
        "200":
          description: Avaliação encontrada e retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvaliacaoResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Avaliação não encontrada para o histórico de atividade fornecido.
        "500":
          description: Erro interno no servidor.

components:
  schemas:
    TagDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "Administração e Gestão"

    AtividadeOngResponseDTO: # Este DTO não está mais sendo usado diretamente nos endpoints do controller fornecido, mas é mantido por compatibilidade com o swagger anterior.
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        status:
          type: string
        criadoEm:
          type: string
          format: date-time

    AtividadeResponseDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        idTag:
          type: integer
          example: 10
        titulo:
          type: string
          example: "Cozinha Solidária"
        nome:
          type: string
          example: "Atividade de Cozinha"
        periodo:
          type: string
          enum:
            - MANHA
            - TARDE
            - NOITE
            - INTEGRAL
          example: "TARDE"
        cargaHorariaDiaria:
          type: string
          example: "4 horas"
        enderecoCompleto:
          type: string
          example: "Rua do Voluntário, 123, Centro, São Paulo - SP"
        possuiCertificacao:
          type: boolean
          example: true
        descricao:
          type: string
          example: "Preparação de refeições para pessoas em situação de rua."
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA
            - ANDAMENTO
            - CONGELADA
          example: "ATIVA"
        dataAtividade:
          type: string
          format: date-time
          example: "2025-07-20T09:00:00Z"
        statusCandidatura:
          type: string
          enum:
            - PENDENTE
            - APROVADO
            - REPROVADO
            - CANCELADO
          example: "PENDENTE"
        idOng:
          type: integer
          example: 101

    AtividadeRequestDTO:
      type: object
      properties:
        id:
          type: integer
          description: O ID é opcional para cadastro e usado para atualização.
          example: 1
        idTag:
          type: integer
          required: true
          example: 10
        titulo:
          type: string
          required: true
          example: "Cozinha Solidária"
        nome:
          type: string
          required: true
          example: "Atividade de Cozinha"
        periodo:
          type: string
          enum:
            - MANHA
            - TARDE
            - NOITE
            - INTEGRAL
          required: true
          example: "TARDE"
        cargaHorariaDiaria:
          type: string
          required: true
          example: "4 horas"
        enderecoCompleto:
          type: string
          required: true
          example: "Rua do Voluntário, 123, Centro, São Paulo - SP"
        possuiCertificacao:
          type: boolean
          required: true
          example: true
        descricao:
          type: string
          required: true
          example: "Preparação de refeições para pessoas em situação de rua."
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA
            - ANDAMENTO
            - CONGELADA
          required: true
          example: "ATIVA"
        dataAtividade:
          type: string
          format: date-time
          required: true
          example: "2025-07-20T09:00:00Z"

    AtividadeStatusRequestDTO:
      type: object
      properties:
        id:
          type: integer
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA
            - ANDAMENTO
            - CONGELADA # Adicionado novos status
      example:
        id: 1
        statusAtividade: "ANDAMENTO"

    AtividadeStatusResponseDTO:
      type: object
      properties:
        id:
          type: integer
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA
            - ANDAMENTO
            - CONGELADA # Adicionado novos status
      example:
        id: 1
        statusAtividade: "ANDAMENTO"

    HistoricoAtividadeDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        descricao:
          type: string
          example: "Auxiliar na limpeza de uma ONG local"
        cargaHorariaDiaria:
          type: string
          example: "4 horas"
        periodo:
          type: string
          enum: # Adicionado enum para PeriodoAtividade
            - MANHA
            - TARDE
            - NOITE
            - INTEGRAL
          example: "TARDE"
        dataInscricao:
          type: string
          format: date-time
          example: "2023-01-15T10:00:00Z"
        estrelas:
          type: integer
          example: 5
        certificado:
          type: boolean
          example: true
        ong:
          type: string
          example: "ONG Amigos dos Animais"
        feedback:
          type: string
          example: "Experiência muito gratificante!"
        encerradoEm:
          type: string
          format: date
          example: "2024-06-01"

    # ==========================================
    # Schemas de ONGs
    # ==========================================
    OngRequestDTO:
      type: object
      required:
        - nomeEntidade
        - cnpj
        - telefone
        - email
        - senha
        - endereco
      properties:
        nomeEntidade:
          type: string
          example: "ONG Amigos do Meio Ambiente"
        cnpj:
          type: string
          example: "00.000.000/0001-00"
        telefone:
          type: string
          example: "(11) 98765-4321"
        email:
          type: string
          format: email
          example: "contato@ongmeioambiente.org"
        senha:
          type: string
          format: password
          example: "senhaSegura123"
        endereco:
          $ref: "#/components/schemas/EnderecoRequestDTO"

    OngResponseDTO:
      type: object
      properties:
        id:
          type: integer
          example: 101
        nomeEntidade:
          type: string
          example: "ONG Amigos do Meio Ambiente"

    PerfilOngResponseDTO:
      type: object
      properties:
        nomeEntidade:
          type: string
          example: "ONG Ajudando Vidas"
        cidade:
          type: string
          example: "São Paulo"
        estado:
          type: string
          example: "SP"
        cnpj:
          type: string
          example: "12.345.678/0001-90"
        rua:
          type: string
          example: "Rua da Esperança"
        numero:
          type: string
          example: "456"
        criadoEm:
          type: string
          format: date-time
          example: "2023-01-01T10:00:00Z"

    DadosOngResponseDTO:
      type: object
      properties:
        nomeEntidade:
          type: string
          example: "ONG Criança Feliz"
        cnpj:
          type: string
          example: "98.765.432/0001-12"
        email:
          type: string
          format: email
          example: "info@criancafeliz.org"
        telefone:
          type: string
          example: "(11) 91234-5678"
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01000-000"
        estado:
          type: string
          example: "SP"
        cidade:
          type: string
          example: "São Paulo"
        bairro:
          type: string
          example: "Centro"
        rua:
          type: string
          example: "Av. Principal"
        numero:
          type: string
          example: "123"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequestDTO"

    OngUpdateRequestDTO:
      type: object
      properties:
        telefone:
          type: string
          example: "(11) 99887-7665"
        endereco:
          $ref: "#/components/schemas/EnderecoUpdateRequestDTO"
        senha:
          type: string
          format: password
          example: "novaSenhaSegura456"

    ListaOngResponse:
      type: object
      properties:
        nomeEntidade:
          type: string
          example: "ONG de Proteção Animal"
        cidade:
          type: string
          example: "Campinas"
        estado:
          type: string
          example: "SP"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequestDTO"
        atividades:
          type: array
          items:
            $ref: "#/components/schemas/AtividadeMinDTO"

    EnderecoRequestDTO:
      type: object
      required:
        - pais
        - cep
        - estado
        - cidade
        - bairro
        - rua
        - numero
      properties:
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01001-000"
        estado:
          type: string
          example: "SP"
        cidade:
          type: string
          example: "São Paulo"
        bairro:
          type: string
          example: "Consolação"
        rua:
          type: string
          example: "Rua Augusta"
        numero:
          type: string
          example: "100"

    EnderecoUpdateRequestDTO:
      type: object
      properties:
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01002-000"
        estado:
          type: string
          example: "RJ"
        cidade:
          type: string
          example: "Rio de Janeiro"
        bairro:
          type: string
          example: "Copacabana"
        rua:
          type: string
          example: "Av. Atlântica"
        numero:
          type: string
          example: "500"

    AtividadeMinDTO:
      type: object
      properties:
        id:
          type: integer
          example: 201
        nome:
          type: string
          example: "Visita a Abrigos"
        descricao:
          type: string
          example: "Visita periódica a abrigos de animais para auxiliar na rotina."

    TagRequestDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "Meio Ambiente"

    # ==========================================
    # Schemas de Voluntários
    # ==========================================
    VoluntarioRequestDTO:
      type: object
      required:
        - nomeCompleto
        - email
        - senha
        - cpf
        - endereco
      properties:
        nomeCompleto:
          type: string
          example: "João da Silva"
        email:
          type: string
          format: email
          example: "joao.silva@example.com"
        senha:
          type: string
          format: password
          example: "senhaSeguraVoluntario"
        cpf:
          type: string
          example: "123.456.789-00"
        telefone:
          type: string
          example: "(11) 98765-1234"
        dataNascimento:
          type: string
          format: date
          example: "1990-01-01"
        endereco:
          $ref: "#/components/schemas/EnderecoRequestDTO"

    VoluntarioResponseDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nomeCompleto:
          type: string
          example: "João da Silva"

    PerfilVoluntarioResponseDTO:
      type: object
      properties:
        firstName:
          type: string
          example: "João"
        fullName:
          type: string
          example: "João da Silva"
        cidade:
          type: string
          example: "São Paulo"
        estado:
          type: string
          example: "SP"
        participacoes:
          type: integer
          example: 10
        media:
          type: integer
          example: 4 # Média de estrelas de feedback
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequestDTO"

    DadosVoluntarioResponseDTO:
      type: object
      properties:
        nomeCompleto:
          type: string
          example: "João da Silva"
        email:
          type: string
          format: email
          example: "joao.silva@example.com"
        cpf:
          type: string
          example: "123.456.789-00"
        telefone:
          type: string
          example: "(11) 98765-1234"
        dataNascimento:
          type: string
          example: "1990-01-01"
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01000-000"
        estado:
          type: string
          example: "SP"
        cidade:
          type: string
          example: "São Paulo"
        bairro:
          type: string
          example: "Centro"
        rua:
          type: string
          example: "Rua do Voluntário"
        numero:
          type: string
          example: "789"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequestDTO"

    VoluntarioUpdateRequestDTO:
      type: object
      properties:
        telefone:
          type: string
          example: "(11) 99887-7665"
        dataNascimento:
          type: string
          format: date
          example: "1990-01-01"
        endereco:
          $ref: "#/components/schemas/EnderecoUpdateRequestDTO"
        senha:
          type: string
          format: password
          example: "novaSenhaSegura456"

    # ==========================================
    # Schemas de Histórico de Atividades (Novos)
    # ==========================================
    VoluntarioAprovadoResponseDTO:
      type: object
      properties:
        idVoluntario:
          type: integer
          example: 1
        nomeVoluntario:
          type: string
          example: "Maria da Silva"

    HistoricoAtividadeResponseDTO:
      type: object
      properties:
        quantidadeVoluntariosAprovados:
          type: integer
          example: 5
        voluntariosAprovados:
          type: array
          items:
            $ref: "#/components/schemas/VoluntarioAprovadoResponseDTO"

    VoluntarioHistoricoResponseDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        historicoId:
          type: integer
          example: 101
        nomeCompleto:
          type: string
          example: "Carlos Eduardo"
        statusCandidatura:
          type: string
          enum:
            - PENDENTE
            - APROVADO
            - REPROVADO
            - CANCELADO
          example: "APROVADO"
        cidade:
          type: string
          example: "Rio de Janeiro"
        tags:
          type: array
          items:
            type: string
          example: ["Educação", "Tecnologia"]
        avaliacaoId:
          type: integer
          example: 201

    HistoricoAtividadeTodosResponseDTO:
      type: object
      properties:
        quantidade:
          type: integer
          example: 15
        voluntarios:
          type: array
          items:
            $ref: "#/components/schemas/VoluntarioHistoricoResponseDTO"

    HistoricoAtividadeRequestDTO:
      type: object
      properties:
        historicoId:
          type: integer
          description: ID do histórico de atividade a ser atualizado.
          example: 101

    # ==========================================
    # Schemas de Avaliações (Novos)
    # ==========================================
    AvaliacaoRequestDTO:
      type: object
      required:
        - historicoId
        - feedback
        - estrelas
      properties:
        historicoId:
          type: integer
          description: ID do histórico de atividade ao qual a avaliação se refere.
          example: 101
        feedback:
          type: string
          description: Comentário ou feedback da avaliação.
          example: "Voluntário muito dedicado e proativo."
        estrelas:
          type: integer
          description: Pontuação da avaliação (1 a 5 estrelas).
          minimum: 1
          maximum: 5
          example: 5

    AvaliacaoResponseDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        feedback:
          type: string
          example: "Voluntário muito dedicado e proativo."
        estrelas:
          type: integer
          example: 5
        voluntarioNome:
          type: string
          example: "João da Silva"
        atividadeNome:
          type: string
          example: "Visita a Asilos"

    # ==========================================
    # Schemas de Atividades (Novos)
    # ==========================================
    AtividadeIdDTO:
      type: object
      properties:
        atividadeId:
          type: integer
          description: ID da atividade.
          example: 1

    VoluntarioAtividadeDTO:
      type: object
      properties:
        idVoluntario:
          type: integer
          example: 1
        nomeVoluntario:
          type: string
          example: "Maria da Silva"
        statusCandidatura:
          type: string
          enum:
            - PENDENTE
            - APROVADO
            - REPROVADO
            - CANCELADO
          example: "APROVADO"

  securitySchemes:
    OAuth2Password:
      type: oauth2
      flows:
        password:
          tokenUrl: http://localhost:8080/oauth2/token
          scopes: {}
security:
  - OAuth2Password: []

servers:
  - url: http://localhost:8080
