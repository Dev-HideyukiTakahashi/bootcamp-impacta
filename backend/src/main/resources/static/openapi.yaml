openapi: 3.0.3
info:
  title: Boação API
  version: 1.0.0
  description: API para gerenciar voluntários, ONGs, atividades e suas interações.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

tags:
  - name: Tags
    description: Endpoints para gerenciamento de tags de atividades
  - name: Atividades
    description: Endpoints para gerenciamento de atividades
  - name: ONGs
    description: Endpoints para gerenciamento de Organizações Não Governamentais (ONGs)
  - name: Histórico de Atividades
    description: Endpoints para histórico de atividades de voluntários

paths:
  # ==========================================
  # Endpoints de Tags
  # ==========================================
  /tags:
    get:
      tags: [Tags]
      summary: Buscar todas as Tags
      description: Retorna todas as Tags de atividades
      responses:
        "200":
          description: Sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagDTO"
        "401":
          description: Não autorizado. Usuário não logado para acessar o recurso.
          content:
            application/json:
              examples:
                unauthorized:
                  summary: Exemplo de resposta 401
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 401
                    error: "Unauthorized"
                    message: "Não autorizado. Usuário não logado."
                    path: "/tags"
        "500":
          description: Erro interno no servidor. Ocorreu um erro inesperado ao processar a solicitação.
          content:
            application/json:
              examples:
                server_error:
                  summary: Exemplo de resposta 500
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 500
                    error: "Internal Server Error"
                    message: "Erro ao processar a solicitação. Falha ao conectar com o banco de dados."
                    path: "/tags"
  /tags/{id}:
    get:
      tags: [Tags]
      summary: Buscar uma Tag pelo ID
      description: Retorna a Tag de uma atividade específica com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          description: ID da Tag a ser buscada
          schema:
            type: integer
      responses:
        "200":
          description: Sucesso. A Tag foi encontrada e retornada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDTO"
        "401":
          description: Não autorizado. Usuário não logado para acessar o recurso.
          content:
            application/json:
              examples:
                unauthorized:
                  summary: Exemplo de resposta 401
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 401
                    error: "Unauthorized"
                    message: "Não autorizado. Usuário não logado."
                    path: "/tags/1"
        "403":
          description: Proibido. O usuário não tem permissão para acessar o recurso.
          content:
            application/json:
              examples:
                forbidden:
                  summary: Exemplo de resposta 403
                  value:
                    timestamp: "2025-04-19T08:30:00.664+00:00"
                    status: 403
                    error: "Forbidden"
                    message: "Proibido. O usuário não tem permissão para acessar o recurso."
                    path: "/tags/1"
        "404":
          description: Não encontrado. A Tag com o ID fornecido não foi encontrada.
          content:
            application/json:
              examples:
                not_found:
                  summary: Exemplo de resposta 404
                  value:
                    timestamp: "2025-04-19T08:35:17.664+00:00"
                    status: 404
                    error: "Not Found"
                    message: "Tag não encontrada! Id: 22"
                    path: "/tags/22"
        "500":
          description: Erro interno no servidor. Ocorreu um erro inesperado ao processar a solicitação.
          content:
            application/json:
              examples:
                server_error:
                  summary: Exemplo de resposta 500
                  value:
                    timestamp: "2025-04-19T08:25:17.664+00:00"
                    status: 500
                    error: "Internal Server Error"
                    message: "Erro ao processar a solicitação. Falha ao conectar com o banco de dados."
                    path: "/tags/1"

  # ==========================================
  # Endpoints de Atividades
  # ==========================================

  /api/atividades:
    get:
      tags: [Atividades]
      summary: Buscar todas as atividades
      description: Retorna uma lista paginada de atividades vinculadas a uma ONG.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nome,asc)"
      responses:
        "200":
          description: Lista de atividades retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/AtividadeOngResponseDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

    post:
      tags: [Atividades]
      summary: Cadastrar nova atividade
      description: Cadastra uma nova atividade para a ONG autenticada.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeRequestDTO"
      responses:
        "200":
          description: Atividade criada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "422":
          description: Dados inválidos.
        "500":
          description: Erro interno no servidor.

  /api/atividades/{id}:
    put:
      tags: [Atividades]
      summary: Atualizar atividade existente
      description: Atualiza os dados de uma atividade específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeRequestDTO"
      responses:
        "200":
          description: Atividade atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "422":
          description: Dados inválidos.
        "500":
          description: Erro interno.

    delete:
      tags: [Atividades]
      summary: Deletar uma atividade
      description: Remove uma atividade com base no ID fornecido.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Atividade deletada com sucesso.
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "500":
          description: Erro interno.

  /api/atividades/{id}/status:
    put:
      tags: [Atividades]
      summary: Atualizar status de uma atividade
      description: Altera o status de uma atividade com base no ID e no novo status informado.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeStatusRequestDTO"
      responses:
        "200":
          description: Status atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AtividadeStatusResponseDTO"
        "400":
          description: Dados inválidos.
        "401":
          description: Não autorizado.
        "404":
          description: Atividade não encontrada.
        "500":
          description: Erro interno.

  # ==========================================
  # Endpoints de Histórico de Atividades
  # ==========================================
  /api/historico-atividades:
    get:
      tags: [Histórico de Atividades]
      summary: Buscar histórico de atividades por ID do usuário
      description: Retorna uma lista paginada do histórico de atividades de um usuário.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: dataInscricao,desc)"
      responses:
        "200":
          description: Histórico de atividades retornado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoricoAtividadeDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.

  /api/historico-atividades/data:
    get:
      tags: [Histórico de Atividades]
      summary: Buscar histórico de atividades por data de encerramento
      description: Retorna uma lista paginada do histórico de atividades encerradas em uma data específica, para o usuário autenticado.
      parameters:
        - in: query
          name: encerradoEm
          schema:
            type: string
            format: date
            example: "2024-06-01" 
          required: true
          description: Data de encerramento no formato YYYY-MM-DD.
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: dataInscricao,desc)"
      responses:
        "200":
          description: Histórico de atividades retornado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoricoAtividadeDTO"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "400":
          description: Formato de data inválido.
        "401":
          description: Não autorizado.
        "500":
          description: Erro interno no servidor.
  
  # ==========================================
  # Endpoints de ONGs
  # ==========================================
  /api/ong/cadastrar:
    post:
      tags: [ONGs]
      summary: Cadastrar nova ONG
      description: Registra uma nova ONG no sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OngRequestDTO"
      responses:
        "201":
          description: ONG criada com sucesso.
          headers:
            Location:
              description: URI do recurso criado.
              schema:
                type: string
                format: uri
                example: "/api/ong"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OngResponseDTO"
        "400":
          description: Requisição inválida. Dados fornecidos são incorretos ou incompletos.
        "409":
          description: Conflito. CNPJ ou E-mail já cadastrados.
        "500":
          description: Erro interno no servidor.

  /api/ong/perfil-ong:
    get:
      tags: [ONGs]
      summary: Obter perfil da ONG autenticada
      description: Retorna os detalhes do perfil da ONG atualmente autenticada.
      responses:
        "200":
          description: Perfil da ONG retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerfilOngResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Perfil da ONG não encontrado.
        "500":
          description: Erro interno no servidor.

  /api/ong/dados-ong:
    get:
      tags: [ONGs]
      summary: Obter dados completos da ONG autenticada
      description: Retorna todos os dados da ONG atualmente autenticada, incluindo informações de contato e endereço.
      responses:
        "200":
          description: Dados da ONG retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DadosOngResponseDTO"
        "401":
          description: Não autorizado.
        "404":
          description: Dados da ONG não encontrados.
        "500":
          description: Erro interno no servidor.

  /api/ong/editar:
    put:
      tags: [ONGs]
      summary: Atualizar dados da ONG autenticada
      description: Atualiza as informações da ONG atualmente autenticada.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OngUpdateRequestDTO"
      responses:
        "204":
          description: Dados da ONG atualizados com sucesso (No Content).
        "400":
          description: Requisição inválida.
        "401":
          description: Não autorizado.
        "404":
          description: ONG não encontrada para atualização.
        "500":
          description: Erro interno no servidor.

  /api/ong/tag/{tag}:
    get:
      tags: [ONGs]
      summary: Buscar ONGs por Tag
      description: Retorna uma lista paginada de ONGs associadas a uma tag específica.
      parameters:
        - name: tag
          in: path
          required: true
          description: Tag a ser utilizada na busca de ONGs.
          schema:
            type: string
            example: "Educação"
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nomeEntidade,asc)"
      responses:
        "200":
          description: Lista de ONGs por tag retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/ListaOngResponse"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "404":
          description: Nenhuma ONG encontrada para a tag especificada.
        "500":
          description: Erro interno no servidor.

  /api/ong/estado/{estado}:
    get:
      tags: [ONGs]
      summary: Buscar ONGs por Estado
      description: Retorna uma lista paginada de ONGs localizadas em um estado específico.
      parameters:
        - name: estado
          in: path
          required: true
          description: 'Estado a ser utilizado na busca de ONGs (ex: SP, RJ).'
          schema:
            type: string
            example: "SP"
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Número da página (começa em 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Tamanho da página
        - in: query
          name: sort
          schema:
            type: string
            description: "Campo para ordenação (ex: nomeEntidade,asc)"
      responses:
        "200":
          description: Lista de ONGs por estado retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/ListaOngResponse"
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        "401":
          description: Não autorizado.
        "404":
          description: Nenhuma ONG encontrada para o estado especificado.
        "500":
          description: Erro interno no servidor.

components:
  schemas:
    TagDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "Administração e Gestão"

    AtividadeOngResponseDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        status:
          type: string
        criadoEm:
          type: string
          format: date-time
        # Adicione os demais campos conforme seu DTO

    AtividadeResponseDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        status:
          type: string
        # Adicione outros campos conforme necessário

    AtividadeStatusRequestDTO:
      type: object
      properties:
        id:
          type: integer
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA

    AtividadeStatusResponseDTO:
      type: object
      properties:
        id:
          type: integer
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA

    AtividadeRequestDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        periodo:
          type: string
          enum:
            - MANHA
            - TARDE
            - NOITE
            - INTEGRAL
        cargaHorariaDiaria:
          type: string
        enderecoCompleto:
          type: string
        possuiCertificacao:
          type: boolean
        descricao:
          type: string
        statusAtividade:
          type: string
          enum:
            - ATIVA
            - INATIVA
            - CANCELADA
        criadoEm:
          type: string
          format: date-time

    HistoricoAtividadeDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        descricao:
          type: string
          example: "Auxiliar na limpeza de uma ONG local"
        cargaHorariaDiaria:
          type: string
          example: "4 horas"
        periodo:
          type: string
          enum:
            - MANHA
            - TARDE
            - NOITE
            - INTEGRAL
          example: "TARDE"
        dataInscricao:
          type: string
          format: date-time
          example: "2023-01-15T10:00:00Z"
        estrelas:
          type: integer
          example: 5
        certificado:
          type: boolean
          example: true
        ong:
          type: string
          example: "ONG Amigos dos Animais"
        feedback:
          type: string
          example: "Experiência muito gratificante!"
        encerradoEm:
          type: string
          format: date
          example: "2024-06-01"
    
    # ==========================================
    # Schemas de ONGs
    # ==========================================
    OngRequestDTO:
      type: object
      required:
        - nomeEntidade
        - cnpj
        - telefone
        - email
        - senha
        - endereco
      properties:
        nomeEntidade:
          type: string
          example: "ONG Amigos do Meio Ambiente"
        cnpj:
          type: string
          example: "00.000.000/0001-00"
        telefone:
          type: string
          example: "(11) 98765-4321"
        email:
          type: string
          format: email
          example: "contato@ongmeioambiente.org"
        senha:
          type: string
          format: password
          example: "senhaSegura123"
        endereco:
          $ref: "#/components/schemas/EnderecoRequestDTO"

    OngResponseDTO:
      type: object
      properties:
        id:
          type: integer
          example: 101
        nomeEntidade:
          type: string
          example: "ONG Amigos do Meio Ambiente"

    PerfilOngResponseDTO:
      type: object
      properties:
        nomeEntidade:
          type: string
          example: "ONG Ajudando Vidas"
        cidade:
          type: string
          example: "São Paulo"
        estado:
          type: string
          example: "SP"
        cnpj:
          type: string
          example: "12.345.678/0001-90"
        rua:
          type: string
          example: "Rua da Esperança"
        numero:
          type: string
          example: "456"

    DadosOngResponseDTO:
      type: object
      properties:
        nomeEntidade:
          type: string
          example: "ONG Criança Feliz"
        cnpj:
          type: string
          example: "98.765.432/0001-12"
        email:
          type: string
          format: email
          example: "info@criancafeliz.org"
        telefone:
          type: string
          example: "(11) 91234-5678"
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01000-000"
        estado:
          type: string
          example: "SP"
        cidade:
          type: string
          example: "São Paulo"
        bairro:
          type: string
          example: "Centro"
        rua:
          type: string
          example: "Av. Principal"
        numero:
          type: string
          example: "123"

    OngUpdateRequestDTO:
      type: object
      properties:
        telefone:
          type: string
          example: "(11) 99887-7665"
        endereco:
          $ref: "#/components/schemas/EnderecoUpdateRequestDTO"
        senha:
          type: string
          format: password
          example: "novaSenhaSegura456"

    ListaOngResponse:
      type: object
      properties:
        nomeEntidade:
          type: string
          example: "ONG de Proteção Animal"
        cidade:
          type: string
          example: "Campinas"
        estado:
          type: string
          example: "SP"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequestDTO"
        atividades:
          type: array
          items:
            $ref: "#/components/schemas/AtividadeMinDTO"
    
    EnderecoRequestDTO:
      type: object
      required:
        - pais
        - cep
        - estado
        - cidade
        - bairro
        - rua
        - numero
      properties:
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01001-000"
        estado:
          type: string
          example: "SP"
        cidade:
          type: string
          example: "São Paulo"
        bairro:
          type: string
          example: "Consolação"
        rua:
          type: string
          example: "Rua Augusta"
        numero:
          type: string
          example: "100"

    EnderecoUpdateRequestDTO:
      type: object
      properties:
        pais:
          type: string
          example: "Brasil"
        cep:
          type: string
          example: "01002-000"
        estado:
          type: string
          example: "RJ"
        cidade:
          type: string
          example: "Rio de Janeiro"
        bairro:
          type: string
          example: "Copacabana"
        rua:
          type: string
          example: "Av. Atlântica"
        numero:
          type: string
          example: "500"

    AtividadeMinDTO:
      type: object
      properties:
        id:
          type: integer
          example: 201
        nome:
          type: string
          example: "Visita a Abrigos"
        descricao:
          type: string
          example: "Visita periódica a abrigos de animais para auxiliar na rotina."

    TagRequestDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "Meio Ambiente"
  securitySchemes:
    OAuth2Password:
      type: oauth2
      flows:
        password:
          tokenUrl: http://localhost:8080/oauth2/token
          scopes: {}
security:
  - OAuth2Password: []

servers:
  - url: http://localhost:8080